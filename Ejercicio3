typedef int            int32_t;
typedef short          int16_t;
typedef char           int8_t;
typedef unsigned int   uint32_t;
typedef unsigned short uint16_t;
typedef unsigned char  uint8_t;

#define APB2ENR *(volatile int*)0x40021018

// Puerto C
#define GPIOC_CRL *(volatile int*)0x40011000
#define GPIOC_CRH *(volatile int*)0x40011004
#define GPIOC_ODR *(volatile int*)0x4001100C // ODR: Guarda el estado de salida


int main(void)
{

	APB2ENR |= (1 << 4);  // Enable clock GIOPC

	GPIOC_CRL  = 0x33333333;            // Make low GPIOC output
	GPIOC_CRH  = 0x33333333;            // Make high GPIOC output

	for(;;)
	{
		volatile int i;
		
		// Encender ambos LEDs
        GPIOC_ODR &= ~(1 << 13);
        GPIOC_ODR &= ~ (1 << 14);

        // retardo
		for(i=0;i<500000;i++);

		// Apagar ambos LEDs
        GPIOC_ODR |= (1 << 13);
        GPIOC_ODR |= (1 << 14);

        //retardo
		for(i=0;i<500000;i++);

	}

	return 0;
}

#define SRAM_SIZE ((uint32_t) 0x00005000)		
#define SRAM_BASE ((uint32_t) 0x20000000)
#define STACKINIT ((interrupt_t)(SRAM_BASE+SRAM_SIZE))

typedef void(*interrupt_t)(void);
const interrupt_t vector_table[256] __attribute__ ((section(".vtab"))) = {
	STACKINIT,												// 0x0000_0000 Stack Pointer
	(interrupt_t) main,										// 0x0000_0004 Reset
};
