typedef int            int32_t;
typedef short          int16_t;
typedef char           int8_t;
typedef unsigned int   uint32_t;
typedef unsigned short uint16_t;
typedef unsigned char  uint8_t;

// Registros de control del reloj (RCC)
// El registro APB2ENR está en la dirección base del RCC más un offset de 0x18
#define APB2ENR *(volatile int*)0x40021018

// Puerto C
#define GPIOC_CRL *(volatile int*)0x40011000
#define GPIOC_CRH *(volatile int*)0x40011004
#define GPIOC_ODR *(volatile int*)0x4001100C // ODR: Guarda el estado de salida

// Puerto B
#define GPIOB_CRL *(volatile int*)0x40010C00
#define GPIOB_CRH *(volatile int*)0x40010C04
#define GPIOB_ODR *(volatile int*)0x40010C0C // lee y escribe en pines de salida
#define GPIOB_IDR *(volatile int*)0x40010C08 // lee y escribe en pines de entrada

int main(void)
{

	APB2ENR |= (1 << 4);                   // Enable GPIOC clock para controlar el LED (pin C13)

	APB2ENR |= (1 << 3); // Enable GPIOB clock para leer el estado del pin B12

	GPIOC_CRL  = 0x33333333;            // Make low GPIOC output
	GPIOC_CRH  = 0x33333333;            // Make high GPIOC output
	
	GPIOB_CRL  = 0x44444444;            // Make low GPIOC input
	GPIOB_CRH  = 0x44444444;            // Make high GPIOC input		
	

	for(;;)
	{
		if(GPIOB_IDR & (1 << 12)) // Si entrada B12 en 1
		{
            GPIOC_ODR &= ~(1 << 13); // se enciende el LED (PC13 a 0)
		}
		else // Si B12 en 0 
		{
			GPIOC_ODR |= (1 << 13); // PC13 a 0, se apaga
		}
	}

	return 0;
}

#define SRAM_SIZE ((uint32_t) 0x00005000)		
#define SRAM_BASE ((uint32_t) 0x20000000)
#define STACKINIT ((interrupt_t)(SRAM_BASE+SRAM_SIZE))

typedef void(*interrupt_t)(void);
const interrupt_t vector_table[256] __attribute__ ((section(".vtab"))) = {
	STACKINIT,												// 0x0000_0000 Stack Pointer
	(interrupt_t) main,	
